<?php

define('LIB4RI_NOTIF_MAIL_FORM_LINK', 'send_email');

/**
 * @file
 * Write some text here
 */
function lib4ri_notif_mail_help($path, $arg){
    switch ($path) {
        case "admin/help#lib4ri_notif_mail":
            return t("some help here");
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function lib4ri_notif_mail_block_info(){
    $blocks['lib4ri_notif_mail'] = array(
        // The name that will appear in the block list.
        'info' => t('Lib4RI Notification e-mails'),
        // Default setting.
        'cache' => DRUPAL_NO_CACHE,
        'region' => 'sidebar_second',
        'status' => 1,
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function lib4ri_notif_mail_block_view($delta = ''){
    switch ($delta) {
        case 'lib4ri_notif_mail':
            module_load_include('inc', 'lib4ri_notif_mail', 'includes/block');
            $object = menu_get_object('islandora_object', 2);
            if ($object && in_array('ir:citationCModel', $object->models)) {
                $block['subject'] = t('Lib4RI notification email');
                if (user_access('access content')) {
                    $result = [];
                    $block['content'] = lib4ri_notif_mail_get_block_links($object);
                }
            }
    }
    return $block;
}

/**
 * Implements hook_menu().
 */
function lib4ri_notif_mail_menu() {
    $items = array();
    $items[LIB4RI_NOTIF_MAIL_FORM_LINK] = array(
        'title' => 'Send email',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_notif_mail_form'),
        'access arguments' => array('lib4ri_notif_mail'),
        'file' => 'includes/lib4ri_notif_mail.form.inc',
    );
    
    $items['admin/config/workflow/lib4ri_notif_mail'] = array(
        'title' => 'Email notification',
        'description' => 'Settings for the authors email notification module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('lib4ri_notif_mail_admin_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'includes/lib4ri_notif_mail.form.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    
//     $items['send-mails/mailids'] = array(
//         'title' => 'Send Mails Autocomplete',
//         'page callback' => 'lib4ri_notif_mail_mailids_autocomplete',
//         'access arguments' => array('access content'),
//         'type' => MENU_CALLBACK,
//         'file' => 'lib4ri_notif_mail.query.inc',
//     );
    return $items;
}

/**
 * Implements hook_permission().
 */
function lib4ri_notif_mail_permission() {
    return array(
        'lib4ri_notif_mail' => array(
            'title' => t('Access notification'),
            'description' => t('User has permission for access the forms'),
        ),
        'advanced_lib4ri_notif_mail' => array(
            'title' => t('Access Advanced notification'),
            'description' => t('Advanced options like, Role based sending.'),
        ),
    );
}


/**
 * Implements hook_mail_alter().
 */
function lib4ri_notif_mail_mail_alter(&$message) {
    if (($message['module'] == 'lib4ri_notif_mail') && ($message['key'] = 'lib4ri_notif_mail_send')) {
        $message['from'] = 'dora@lib4ri.ch';
        $message['headers'] = array(
            'MIME-Version' => '1.0',
            'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
            'Content-Transfer-Encoding' => '8Bit',
            'X-Mailer' => 'Drupal',
        );
    }
}


/**
 * Implements hook_token_info(). 
 */
function lib4ri_notif_mail_token_info() {
    $info['tokens']['lib4ri_notif_mail']['title'] = array(
        'name' => t('Title'),
        'description' => t('The publication title '),
    );
    $info['tokens']['lib4ri_notif_mail']['titleshort'] = array(
        'name' => t('Trunkated title'),
        'description' => t('The trunkated publication title '),
    );
    return $info;
}

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 */
function lib4ri_notif_mail_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    if ($type == 'lib4ri_notif_mail') {
        foreach ($tokens as $name => $original) {
            if (array_key_exists($name, $data)) {
                $replacements[$original] = $data[$name];
            }
        }
    }
    return $replacements;
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function lib4ri_notif_mail_ir_citationCModel_islandora_object_ingested($object) {
    if (!empty($_GET['sid'])){
        $data = array(
            'object_id' => $object->id,
            'sid' => $_GET['sid'],
            'nid' => $_GET['nid'],
        );
        #      drupal_write_record('lib4ri_notif_mail_lib4ridora_webform', $data);
        db_insert('lib4ri_notif_mail_lib4ridora_webform')->fields($data)->execute();
    }
}

/**
* Implements hook_CMODEL_PID_islandora_object_purged().
*/
function lib4ri_notif_mail_ir_citationCModel_islandora_object_purged($pid) {
    db_delete('lib4ri_notif_mail_lib4ridora_webform')->condition('object_id', $pid)->execute();
}